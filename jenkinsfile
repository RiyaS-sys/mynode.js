pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'blood-bank-app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        PATH = "${env.PATH};C:\\Program Files\\Docker\\Docker\\resources\\bin"
    }
    
    stages {
        stage('Clone Repo') {
            steps {
                git credentialsId: 'My_project', url: 'https://github.com/RiyaS-sys/mynode.js', branch: 'main'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                bat "docker build -t %DOCKER_IMAGE%:%DOCKER_TAG% ."
                bat "docker tag %DOCKER_IMAGE%:%DOCKER_TAG% %DOCKER_IMAGE%:latest"
            }
        }
        
        stage('Run Docker Tests') {
            steps {
                echo 'Running tests inside Docker container...'
                // Run tests in a temporary container, using the same image we just built
                bat "docker run --rm %DOCKER_IMAGE%:%DOCKER_TAG% npm test"
            }
        }
        
        stage('Run Docker Compose') {
            steps {
                echo 'Starting application with Docker Compose...'
                // Try to bring down any existing containers, but don't fail if there aren't any
                bat 'docker-compose down || echo "No containers to remove"'
                bat 'docker-compose up -d'
            }
        }
        
        stage('Verify Service') {
            steps {
                echo 'Verifying services are running...'
                script {
                    // Wait for application to be ready
                    bat 'timeout /t 10 /nobreak'
                    
                    // Check if services are running
                    bat 'docker ps'
                    
                    // Simple health check to the API
                    bat 'curl -f http://localhost:3000 || echo "Service check completed"'
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            bat 'docker-compose down || echo "No containers to remove"'
            // Remove unused Docker images to save space
            bat 'docker image prune -f'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}