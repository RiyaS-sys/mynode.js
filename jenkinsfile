pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'blood-bank-app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        PATH = "${env.PATH};C:\\Program Files\\nodejs\\;C:\\Program Files\\Docker\\Docker\\resources\\bin"
    }
    
    stages {
        stage('Clone Repo') {
            steps {
                git credentialsId: 'My_project', url: 'https://github.com/RiyaS-sys/mynode.js', branch: 'main'
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing dependencies...'
                bat 'npm install'
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests...'
                bat 'npm test'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                bat "docker build -t %DOCKER_IMAGE%:%DOCKER_TAG% ."
                bat "docker tag %DOCKER_IMAGE%:%DOCKER_TAG% %DOCKER_IMAGE%:latest"
            }
        }
        
        stage('Run Docker Compose') {
            steps {
                echo 'Starting application with Docker Compose...'
                // Try to bring down any existing containers, but don't fail if there aren't any
                bat 'docker-compose down || echo "No containers to remove"'
                bat 'docker-compose up -d'
            }
        }
        
        stage('Integration Test') {
            steps {
                echo 'Running integration tests against Docker container...'
                script {
                    // Wait for application to be ready (Windows-style sleep)
                    bat 'timeout /t 10 /nobreak'
                    
                    // Test the running application
                    bat 'curl -f http://localhost:3000 || echo "Service check completed"'
                }
            }
        }
        
        stage('Generate Test Reports') {
            steps {
                echo 'Generating test reports...'
                bat 'npm test -- --coverage'
                
                // Archive the test results if you're using JUnit reporter
                junit allowEmptyResults: true, testResults: 'junit-*.xml'
                
                // Archive the coverage report
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: 'coverage/lcov-report',
                    reportFiles: 'index.html',
                    reportName: 'Coverage Report'
                ])
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            bat 'docker-compose down || echo "No containers to remove"'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}