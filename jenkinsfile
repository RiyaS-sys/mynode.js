pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'blood-bank-app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        PATH = "${env.PATH};C:\\Program Files\\Docker\\Docker\\resources\\bin"
        DOCKERHUB_REPO = 'riyanovation/bloodbank'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials') // You'll need to create this credential in Jenkins
    }
    
    stages {
        stage('Clone Repo') {
            steps {
                git credentialsId: 'My_project', url: 'https://github.com/RiyaS-sys/mynode.js', branch: 'main'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image for testing...'
                bat "docker build --target test -t %DOCKER_IMAGE%-test:%DOCKER_TAG% ."
                
                echo 'Building Docker production image...'
                bat "docker build --target production -t %DOCKER_IMAGE%:%DOCKER_TAG% ."
                bat "docker tag %DOCKER_IMAGE%:%DOCKER_TAG% %DOCKER_IMAGE%:latest"
                
                // Tag the image for DockerHub
                bat "docker tag %DOCKER_IMAGE%:%DOCKER_TAG% %DOCKERHUB_REPO%:%DOCKER_TAG%"
                bat "docker tag %DOCKER_IMAGE%:latest %DOCKERHUB_REPO%:latest"
            }
        }
        
        stage('Run Tests in Docker') {
            steps {
                echo 'Running tests inside Docker container...'
                bat "docker run --rm %DOCKER_IMAGE%-test:%DOCKER_TAG%"
            }
        }
        
        stage('Push to DockerHub') {
            steps {
                echo 'Pushing image to DockerHub...'
                script {
                    // Login to DockerHub
                    bat "echo %DOCKERHUB_CREDENTIALS_PSW% | docker login -u %DOCKERHUB_CREDENTIALS_USR% --password-stdin"
                    
                    // Push images to DockerHub
                    bat "docker push %DOCKERHUB_REPO%:%DOCKER_TAG%"
                    bat "docker push %DOCKERHUB_REPO%:latest"
                }
            }
        }
        
        stage('Run Docker Compose') {
            steps {
                echo 'Starting application with Docker Compose...'
                bat 'docker-compose down || echo "No containers to remove"'
                bat 'docker-compose up -d'
            }
        }
        
        stage('Verify Service') {
            steps {
                echo 'Verifying services are running...'
                script {
                    // Use ping with -n instead of timeout
                    bat 'ping 127.0.0.1 -n 11 > nul'
                    
                    // Check Docker containers
                    bat 'docker ps'
                    
                    // Health check
                    bat 'echo "Service check completed"'
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            bat 'docker-compose down || echo "No containers to remove"'
            bat 'docker image prune -f'
            
            // Logout from DockerHub
            bat 'docker logout'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}